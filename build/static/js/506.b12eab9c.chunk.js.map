{"version":3,"file":"static/js/506.b12eab9c.chunk.js","mappings":"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","sources":["components/pokemonCard/pokemonCard.tsx","constants/pokemon.types.ts","constants/utils.ts","hooks/tooltip/tooltip.tsx","components/pokemonDetailsCard/detailsHeader/detailsHeader.tsx","components/pokemonDetailsCard/colorfulTags/colorfulTag.tsx","components/pokemonDetailsCard/propertyCard/propertyCard.tsx","components/pokemonDetailsCard/statCard/statCard.tsx","components/pokemonDetailsCard/evolutionChainCard/evolutionChainCard.tsx","pages/details/details.page.tsx"],"sourcesContent":["import React from 'react';\nimport { PokemonCardProps } from \"../../constants/pokemon.types\";\nimport { getBackground } from \"../../constants/utils\";\nimport { numberFormation } from \"../../services/common.service\";\nimport \"./pokemonCard.scss\";\n\n\nconst PokemonCard: React.FC<PokemonCardProps> = ({ data, onClick, className = '' }) => {\n    const { id, name, types, sprites } = data;\n    const background = getBackground(types || []);\n    const imageUrl = sprites?.other?.dream_world?.front_default ||\n        sprites?.front_default || \"https://via.placeholder.com/150\"\n\n    return (\n        <div className={`${className} card`} onClick={onClick} role=\"presentation\" style={{ background }}>\n            <div className=\"image-container\">\n                <img src={imageUrl} alt={`${name} sprite`} />\n            </div>\n            <div className=\"text-container\">\n                <strong><b>{name}</b></strong>\n                <span>{numberFormation(id)}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default PokemonCard;","export type PokemonTypeObject = {\n  color: string;\n  hex: string;\n};\n\nexport type PokemonType =\n  | 'normal'\n  | 'fighting'\n  | 'flying'\n  | 'poison'\n  | 'ground'\n  | 'rock'\n  | 'bug'\n  | 'ghost'\n  | 'steel'\n  | 'fire'\n  | 'water'\n  | 'grass'\n  | 'electric'\n  | 'psychic'\n  | 'ice'\n  | 'dragon'\n  | 'dark'\n  | 'fairy'\n  | 'shadow';\n\n\nexport const POKEMON_TYPE: Record<PokemonType, PokemonTypeObject> = {\n  normal: {\n    color: \"#DDCBD0\",\n    hex: \"\"\n  },\n  fighting: {\n    color: \"#FCC1B0\",\n    hex: \"\"\n  },\n  flying: {\n    color: \"#B2D2E8\",\n    hex: \"\"\n  },\n  poison: {\n    color: \"#CFB7ED\",\n    hex: \"\"\n  },\n  ground: {\n    color: \"#F4D1A6\",\n    hex: \"\"\n  },\n  rock: {\n    color: \"#C5AEA8\",\n    hex: \"\"\n  },\n  bug: {\n    color: \"#C1E0C8\",\n    hex: \"\"\n  },\n  ghost: {\n    color: \"#D7C2D7\",\n    hex: \"\"\n  },\n  steel: {\n    color: \"#C2D4CE\",\n    hex: \"\"\n  },\n  fire: {\n    color: \"#EDC2C4\",\n    hex: \"\"\n  },\n  water: {\n    color: \"#CBD5ED\",\n    hex: \"\"\n  },\n  grass: {\n    color: \"#C0D4C8\",\n    hex: \"\"\n  },\n  electric: {\n    color: \"#E2E2A0\",\n    hex: \"\"\n  },\n  psychic: {\n    color: \"#DDC0CF\",\n    hex: \"\"\n  },\n  ice: {\n    color: \"#C7D7DF\",\n    hex: \"\"\n  },\n  dragon: {\n    color: \"#CADCDF\",\n    hex: \"\"\n  },\n  dark: {\n    color: \"#C6C5E3\",\n    hex: \"\"\n  },\n  fairy: {\n    color: \"#E4C0CF\",\n    hex: \"\"\n  },\n  shadow: {\n    color: \"#CACACA\",\n    hex: \"\"\n  }\n} as const;\n\nexport interface PokemonTypesData {\n  type: {\n    name: PokemonType;\n    url: string;\n  },\n  slot: string;\n}\n\nexport interface PokemonDescriptionData {\n  language: {\n    name: string;\n  };\n  flavor_text: string;\n}\n\nexport interface AppMultiSelectDropDownProps {\n  label: string;\n  onChangeHandler: (value: string[], event: React.SyntheticEvent) => void;\n  data: any[];\n  placeholder?: string;\n  isOpen?: boolean;\n  onCloseHandler?: () => void;\n  onCleanHandler?: (event: React.SyntheticEvent) => void;\n  onOpenHandler?: () => void;\n}\n\nexport interface SearchFilterProps {\n  placeholder: string;\n  inputClass: string;\n  onChangeHandler: (value: string, event: React.ChangeEvent<HTMLInputElement>) => void;\n  label: React.ReactNode;\n}\n\nexport interface AppFilterProps {\n  isFilterEnable: (isEnabled: boolean) => void;\n}\n\nexport interface Ability {\n  ability: {\n    name: string;\n    url: string;\n  };\n}\n\nexport interface DamageRelations {\n  double_damage_from: any;\n  damage_relations: Array<{ name: string }>;\n}\n\nexport interface SpeciesData {\n  egg_groups: Array<{ name: string }>;\n}\n\nexport interface Data {\n  height: number;\n  weight: number;\n  abilities: Ability[];\n  types: PokemonTypesData[];\n}\n\nexport interface PropertyCardProps {\n  speciesData: SpeciesData;\n  data: Data;\n  pokemonTypeData: {\n    damage_relations: DamageRelations;\n  };\n}\n\nexport interface AppLoaderProps {\n  className?: string;\n}\n\nexport interface Stat {\n  stat: {\n    name: string;\n    url: string;\n  };\n  base_stat: number;\n}\n\nexport interface StatCardProps {\n  stats: Stat[];\n}\n\nexport interface PokemonData {\n  id: number;\n  name: string;\n  height: number;\n  weight: number;\n  abilities: Ability[];\n  types: PokemonTypesData[];\n  stats?: Stat[];\n}\n\nexport interface TypeData {\n  // Define the structure of the type data based on your API response\n  damage_relations: DamageRelations;\n}\n\nexport interface DetailPageProps {\n  isCardSelected: boolean;\n  toggleModal: () => void;\n  pokemonId: number;\n  offset: number;\n}\n\nexport interface PokemonCardProps {\n  data: {\n    id: number;\n    name?: string;\n    types?: PokemonTypesData[];\n    sprites?: {\n      other?: {\n        dream_world?: {\n          front_default?: string | null;\n        };\n      };\n      front_default?: string | null;\n    };\n  };\n  onClick?: () => void;\n  className?: string;\n}\n\nexport interface EvolutionChainCardProps {\n  data: {\n    id: number;\n    // Add other properties of the data object as needed\n  };\n}\n\nexport interface DetailsHeaderProps {\n  data: any;\n  speciesData: any;\n  backClick: () => void;\n  closeClick: () => void;\n  forwardClick: () => void;\n}\n\nexport interface ColorfulTagProps {\n  text: string;\n  className: string;\n  type: any;\n}\n\nexport interface Pokemon {\n  id: number;\n  name: string;\n  description: string;\n  url: string;\n  base_experience?: number;\n  height: number;\n  is_default?: boolean;\n  order: number;\n  weight?: number;\n  abilities?: Ability[];\n  moves?: Move[];\n  stats?: Stat[];\n  types?: PokemonTypesData[];\n  species?: {\n    name: string;\n    url: string;\n  };\n}\n\nexport interface PokemonList {\n  name: string;\n  url: string;\n}\n\nexport interface Ability {\n  is_hidden: boolean;\n  slot: number;\n  ability: {\n    name: string;\n    url: string;\n  };\n}\n\nexport interface Move {\n  move: {\n    name: string;\n    url: string;\n  };\n  version_group_details: any[];\n}\n\nexport interface Stat {\n  base_stat: number;\n  effort: number;\n  stat: {\n    name: string;\n    url: string;\n  };\n}\n\nexport type GenderValue = 'female' | 'male' | 'genderless';\n\nexport interface PokemonGender {\n  name: GenderValue;\n  url: string;\n}\n\nexport interface PokemonState {\n  pokemonList: PokemonList[];\n  allPokemonList: Pokemon[];\n  pokemonSelectedId: number | null;\n  pokemonData: Pokemon | null;\n  isLoading: boolean;\n  isLoadMoreInprogress: boolean;\n  pokemonTypes: PokemonType[];\n  pokemonGenderList: PokemonGender[];\n}\n\nexport interface State {\n  isLoading: boolean;\n  pokemonList: PokemonList[];\n  allPokemonList: Pokemon[];\n  // Add other state properties as necessary\n}\n\nexport interface Action {\n  type: string;\n  payload: any;\n}","import { PokemonType, POKEMON_TYPE, PokemonTypesData, PokemonDescriptionData } from \"./pokemon.types\";\n\nexport const getPokemonBgColor = (type: PokemonType): string => {\n  return POKEMON_TYPE[type] ? POKEMON_TYPE[type].color : \"C0DFDD\";\n};\n\nexport const getBackground = (pokemonTypes: PokemonTypesData[]): string => {\n  let color = \"\";\n  if (pokemonTypes.length) {\n    const { type: { name: pokemonTypeOne } } = pokemonTypes[0];\n    if (pokemonTypes.length > 1) {\n      const { type: { name: pokemonTypeTwo } } = pokemonTypes[1];\n      color = `linear-gradient(180deg, ${getPokemonBgColor(pokemonTypeOne)} 0%, ${getPokemonBgColor(pokemonTypeTwo)} 100%)`;\n    } else {\n      color = getPokemonBgColor(pokemonTypeOne);\n    }\n  }\n  return color;\n};\n\n\nexport const getPokemonDescription = (data: PokemonDescriptionData[]): string => {\n  if (data.length) {\n    let uniqueTextArray: string[] = [];\n    return data.reduce((acc, next) => {\n      if (next.language.name === \"en\" && !uniqueTextArray.includes(next.flavor_text)) {\n        uniqueTextArray.push(next.flavor_text);\n        return acc += next.flavor_text.replace(/\\n|\\f/g, \" \");\n      }\n      return acc;\n    }, \"\");\n  }\n  return \"\";\n};\n\nexport const getCamelCaseString = (str: string): string => {\n  if (!str) return \"\";\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};","import React, { forwardRef, ReactNode } from 'react';\nimport { Whisper, Popover } from 'rsuite';\n\ninterface DefaultPopoverProps {\n    content: ReactNode;\n    className?: string;\n    [key: string]: any; // To allow other props\n}\n\n// eslint-disable-next-line react/display-name\nconst DefaultPopover = forwardRef<HTMLDivElement, DefaultPopoverProps>(({ content, className, ...props }, ref) => {\n    return (\n        <Popover ref={ref} {...props} className={className} arrow={false}>\n            <p>{content}</p>\n        </Popover>\n    );\n});\n\ninterface AppTooltipProps {\n    placement: 'top' | 'bottom' | 'left' | 'right'; // Specify allowed placements\n    data: ReactNode;\n    className?: string;\n    name: string;\n    tooltipClass?: string;\n}\n\nconst AppTooltip: React.FC<AppTooltipProps> = ({ placement, data, className, name, tooltipClass }) => (\n    <Whisper\n        trigger=\"click\"\n        placement={placement}\n        controlId={`control-id-${placement}`}\n        speaker={\n            <DefaultPopover content={data} className={tooltipClass} />\n        }\n    >\n        <div className={className}>{name}</div>\n    </Whisper>\n);\n\nexport default AppTooltip;","import PokemonCard from \"../../pokemonCard/pokemonCard\";\nimport AppTooltip from \"../../../hooks/tooltip/tooltip\";\nimport backIcon from \"../../../assets/icons/back-icon.png\";\nimport closeIcon from \"../../../assets/icons/close-icon.png\"\nimport rightIcon from \"../../../assets/icons/right-icon.png\"\nimport { numberFormation } from \"../../../services/common.service\";\nimport { getPokemonDescription } from \"../../../constants/utils\";\nimport \"./detailsHeader.scss\";\nimport \"../../../styles/common.scss\";\nimport { DetailsHeaderProps } from \"../../../constants/pokemon.types\";\n\nconst DetailsHeader = ({ data, speciesData, backClick, closeClick, forwardClick }: DetailsHeaderProps) => {\n\n  const getPokemonDescriptions = () => {\n    if (speciesData && speciesData.flavor_text_entries) {\n      return getPokemonDescription(speciesData.flavor_text_entries);\n    } else {\n      return \"\";\n    }\n  }\n\n  return (\n    <>\n      <div className=\"details-header-container\">\n        <div className=\"header-wrap\">\n          <div>\n            <PokemonCard className=\"disabled-click\" key={data.id} data={data} onClick={() => { }} />\n          </div>\n          <div className=\"header-sub-wrap pl-3\">\n            <div className=\"title-wrap\">\n              <div>\n                <h3 className=\"text-caps\">{data.name}</h3>\n              </div>\n              <div className=\"horizontal-line\"></div>\n              <div>\n                <h3>{numberFormation(data.id)}</h3>\n              </div>\n              <div className=\"horizontal-line\"></div>\n              <div>\n                <div className=\"icon-wrap\">\n                  <img src={backIcon} alt=\"back icon to go backward\" onClick={backClick} onKeyDown={() => { }} role=\"presentation\"></img>\n                  <img src={closeIcon} alt=\"close icon to go backward\" onClick={closeClick} onKeyDown={() => { }} role=\"presentation\"></img>\n                  <img src={rightIcon} alt=\"forward icon to go backward\" onClick={forwardClick} onKeyDown={() => { }} role=\"presentation\"></img>\n                </div>\n              </div>\n            </div>\n            <div className=\"text-description\">\n              <div className=\"text-dot\"><span >{getPokemonDescriptions().substring(0, 363)} </span></div>\n              <div className=\"text-dot\">... </div>\n              {getPokemonDescriptions().length > 363 && <AppTooltip placement=\"bottom\"\n                className=\"load-more\"\n                tooltipClass=\"tooltip-popover\"\n                name=\"read more\"\n                data={getPokemonDescriptions()}\n                // appearance=\"subtle\"\n              />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DetailsHeader;","import React from 'react';\nimport { getPokemonBgColor } from '../../../constants/utils';\nimport \"./colorfulTags.scss\";\nimport { ColorfulTagProps } from '../../../constants/pokemon.types';\n\n\nconst ColorfulTag: React.FC<ColorfulTagProps> = ({ text, className, type }) => {\n  return (\n    <div>\n      <div className={className}>\n        <span style={{\n          background: getPokemonBgColor(type)\n        }} className=\"colorful-tag\">{text}</span>\n      </div>\n    </div>\n  )\n}\n\nexport default ColorfulTag;","import React from 'react';\nimport { Grid, Row, Col } from 'rsuite';\nimport { getCamelCaseString } from '../../../constants/utils';\nimport ColorfulTag from '../colorfulTags/colorfulTag';\nimport \"./propertyCard.scss\";\nimport \"../../../styles/common.scss\";\nimport { PropertyCardProps } from '../../../constants/pokemon.types';\n\nconst PropertyCard: React.FC<PropertyCardProps> = React.memo(({ speciesData, data, pokemonTypeData }) => {\n  return (\n    <Grid fluid>\n      <Row className=\"show-grid\">\n        <Col xs={12} sm={12} lg={6} xl={6}>\n          <div className='flex-col'>\n            <span className=\"prop-header\">Height</span>\n            <div className='prop-header-data'>{data.height}</div>\n          </div>\n        </Col>\n        <Col xs={12} sm={12} lg={6} xl={6}>\n          <div className='flex-col'>\n            <span className=\"prop-header\">Weight</span>\n            <div className='prop-header-data'>{data.weight / 10} Kg</div>\n          </div>\n        </Col>\n        <Col xs={12} sm={12} lg={6} xl={6}>\n          <div className='flex-col'>\n            <span className=\"prop-header\">Gender(s)</span>\n            <div className='prop-header-data'>Male, Female</div>\n          </div>\n        </Col>\n        <Col xs={12} sm={12} lg={6} xl={6}>\n          <div className='flex-col'>\n            <span className=\"prop-header\">Egg Groups</span>\n            <div className='prop-header-data'>\n              {speciesData.egg_groups.map((item, index) => (\n                <span key={item.name}>\n                  {getCamelCaseString(item.name)}\n                  {index < speciesData.egg_groups.length - 1 && ', '}\n                </span>\n              ))}\n            </div>\n          </div>\n        </Col>\n      </Row>\n      <Row className=\"show-grid pt-3\">\n        <Col xs={12} sm={12} lg={6} xl={6}>\n          <div className='flex-col'>\n            <span className=\"prop-header\">Abilities</span>\n            <div className='prop-header-data'>\n              {data.abilities.map((item, index) => (\n                <span key={item.ability.name}>\n                  {getCamelCaseString(item.ability.name)}\n                  {index < data.abilities.length - 1 && ', '}\n                </span>\n              ))}\n            </div>\n          </div>\n        </Col>\n        <Col xs={12} sm={12} lg={6} xl={6}>\n          <div className='flex-col'>\n            <span className=\"prop-header\">Types</span>\n            <div className='prop-header-data type-wrap'>\n              {data.types.map((item) => (\n                <ColorfulTag key={item.type.name} className=\"pr-1\" type={item.type.name} text={getCamelCaseString(item.type.name)} />\n              ))}\n            </div>\n          </div>\n        </Col>\n        <Col xs={12} sm={12} lg={12} xl={12}>\n          <div className='flex-col'>\n            <span className=\"prop-header\">Weak Against </span>\n            <div className='prop-header-data type-wrap'>\n              {pokemonTypeData.damage_relations.double_damage_from.map((item: { name: any }) => (\n                <ColorfulTag key={item.name} className=\"pr-1\" type={item.name} text={getCamelCaseString(item.name)} />\n              ))}\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </Grid>\n  );\n});\n\nexport default PropertyCard;","import React from 'react';\nimport { Grid, Row, Col } from 'rsuite';\nimport { getCamelCaseString } from '../../../constants/utils';\nimport \"./statCard.scss\";\nimport { StatCardProps } from \"../../../constants/pokemon.types\"\n\n\nconst StatCard: React.FC<StatCardProps> = ({ stats }) => {\n  const getStatHeading = (name: string): string => {\n    if (name === \"hp\") {\n      return \"HP\";\n    }\n    const [firstName, lastName] = name.split(\"-\");\n    return firstName === \"special\" && lastName \n      ? `Sp. ${getCamelCaseString(lastName)}`\n      : getCamelCaseString(firstName);\n  };\n\n  return (\n    <div className='stat-container'>\n      <div className='stat-card'>\n        <span className='stat-header'>Stats</span>\n        <Grid fluid>\n          <Row className=\"show-grid\">\n            {stats.map(item => (\n              <Col key={item.stat.name} className=\"pl-0 pt-1\" lg={12} xl={12} xs={24} sm={24}>\n                <div className='stat-flex-row'>\n                  <Col xs={4} lg={8} xl={8} className=\"pl-0 pr-0\">\n                    <span className=\"prop-header\">{getStatHeading(item.stat.name)}</span>\n                  </Col>\n                  <Col xs={8} lg={10} xl={10} className=\"pl-0 pr-0\">\n                    <div className='prop-header-data'>\n                      <span className=\"stat-data\">{item.base_stat}</span>\n                      <progress value={item.base_stat} max=\"100\">{item.base_stat}</progress>\n                    </div>\n                  </Col>\n                </div>\n              </Col>\n            ))}\n          </Row>\n        </Grid>\n      </div>\n    </div>\n  );\n};\n\nexport default StatCard;","import React from 'react';\nimport \"./evolutionChainCard.scss\";\nimport \"../../../styles/common.scss\";\nimport PokemonCard from \"../../pokemonCard/pokemonCard\";\nimport rightArrowIcon from \"../../../assets/icons/right-arrow.png\";\nimport { PokemonCardProps } from \"../../../constants/pokemon.types\"\n\nconst EvolutionChainCard: React.FC<PokemonCardProps> = ({ data }) => {\n    const arrayele = [1, 2, 3];\n\n    return ( \n        <div>\n            <div className=\"evol-container\">\n                <div className=\"evol-wrap evolu-break\">\n                    {arrayele.map((obj, index) => (\n                        <div className=\"flex-row\" key={obj}>\n                            <div>\n                                <div className=\"pt-2\">\n                                    <PokemonCard className=\"disabled-click\" key={data.id} data={data} />\n                                </div>\n                            </div>\n                            {arrayele.length !== index + 1 && (\n                                <div>\n                                    <div className=\"evol-next-arrow\">\n                                        <img src={rightArrowIcon} alt=\"right arrow icon\" onKeyDown={() => { }} role=\"presentation\" />\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default EvolutionChainCard;","import './details.page.scss';\nimport React, { useState, useEffect } from \"react\";\nimport { Loader, Modal, Placeholder } from 'rsuite';\nimport { getPokemonDataById, getPokemonTypesById, getSpeciesDataById } from \"../../services/common.service\";\nimport DetailsHeader from '../../components/pokemonDetailsCard/detailsHeader/detailsHeader';\nimport PropertyCard from '../../components/pokemonDetailsCard/propertyCard/propertyCard';\nimport StatCard from '../../components/pokemonDetailsCard/statCard/statCard';\nimport EvolutionChainCard from '../../components/pokemonDetailsCard/evolutionChainCard/evolutionChainCard';\nimport { DetailPageProps, PokemonData, SpeciesData, TypeData } from '../../constants/pokemon.types';\n\nconst DetailPage: React.FC<DetailPageProps> = ({ isCardSelected, toggleModal, pokemonId, offset }) => {\n    const [currentPokemonId, setCurrentPokemonId] = useState<number>(pokemonId);\n    const handleClose = () => toggleModal();\n    const [data, setPokemonData] = useState<PokemonData | null>(null);\n    const [isDetailLoading, setLoading] = useState<boolean>(true);\n    const [isModalOpen, setCloseModal] = useState<boolean>(isCardSelected);\n    const [pokemonSpeciesData, setPokemonSpeciesData] = useState<SpeciesData | null>(null);\n    const [pokemonTypeData, setPokemonTypeData] = useState<TypeData | null>(null);\n\n    useEffect(() => {\n        if (!currentPokemonId) return;\n        (async function setPokemonDetails() {\n            setLoading(true);\n            const response = await getPokemonDataById(currentPokemonId);\n            setPokemonData(response);\n            setLoading(false);\n            const speciesData = await getSpeciesDataById(currentPokemonId);\n            setPokemonSpeciesData(speciesData);\n            const typeData = await getPokemonTypesById(currentPokemonId);\n            setPokemonTypeData(typeData);\n        })();\n    }, [currentPokemonId]);\n\n    const handleForwardClick = () => {\n        if (currentPokemonId === offset) return;\n        setCurrentPokemonId(currentPokemonId + 1);\n    };\n\n    const handleBackwardClick = () => {\n        if (currentPokemonId === 1) return;\n        setCurrentPokemonId(currentPokemonId - 1);\n    };\n\n    const closePopUp = () => {\n        setCloseModal(false);\n    };\n\n    return (\n        <>\n            <Modal\n                dialogClassName={\"details-modal-container\"}\n                size={\"md\"}\n                open={isModalOpen}\n                onClose={handleClose}\n                onExited={() => {\n                    setPokemonData(null);\n                }}\n            >\n                {data ? (\n                    <>\n                        <div className=\"model-container\">\n                            <Modal.Header closeButton={false} className=\"rs-modal-header-2\">\n                                {isDetailLoading && <Placeholder.Paragraph style={{ marginTop: 30 }} rows={5} graph=\"image\" active />}\n                                {!isDetailLoading && (\n                                    <div>\n                                        <DetailsHeader\n                                            data={data}\n                                            speciesData={pokemonSpeciesData}\n                                            forwardClick={handleForwardClick}\n                                            backClick={handleBackwardClick}\n                                            closeClick={closePopUp}\n                                        />\n                                    </div>\n                                )}\n                                <div className=\"padding-components\">\n                                    {pokemonSpeciesData && pokemonTypeData && (\n                                        <PropertyCard\n                                            speciesData={pokemonSpeciesData}\n                                            data={data}\n                                            pokemonTypeData={pokemonTypeData}\n                                        />\n                                    )}\n                                </div>\n                                <div className=\"padding-components\">\n                                    {data.stats && (<StatCard stats={data.stats} />)}\n                                </div>\n                                <div className=\"padding-components\">\n                                    <EvolutionChainCard data={data} />\n                                </div>\n                            </Modal.Header>\n                            <Modal.Body>\n                            </Modal.Body>\n                        </div>\n                    </>\n                ) : (\n                    <div style={{ textAlign: 'center' }}>\n                        <Loader size=\"md\" />\n                    </div>\n                )}\n            </Modal>\n        </>\n    );\n};\n\nexport default DetailPage;"],"names":["_ref","_sprites$other","_sprites$other$dream_","data","onClick","className","id","name","types","sprites","background","getBackground","imageUrl","other","dream_world","front_default","_jsxs","concat","role","style","children","_jsx","src","alt","numberFormation","POKEMON_TYPE","normal","color","hex","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","shadow","getPokemonBgColor","type","pokemonTypes","length","pokemonTypeOne","pokemonTypeTwo","getPokemonDescription","uniqueTextArray","reduce","acc","next","language","includes","flavor_text","push","replace","getCamelCaseString","str","charAt","toUpperCase","slice","DefaultPopover","forwardRef","ref","content","props","_objectWithoutProperties","_excluded","Popover","_objectSpread","arrow","_ref2","placement","tooltipClass","Whisper","trigger","controlId","speaker","speciesData","backClick","closeClick","forwardClick","getPokemonDescriptions","flavor_text_entries","_Fragment","PokemonCard","onKeyDown","closeIcon","substring","AppTooltip","text","React","pokemonTypeData","Grid","fluid","Row","Col","xs","sm","lg","xl","height","weight","egg_groups","map","item","index","abilities","ability","ColorfulTag","damage_relations","double_damage_from","stats","getStatHeading","firstName","lastName","split","stat","base_stat","value","max","arrayele","obj","isCardSelected","toggleModal","pokemonId","offset","currentPokemonId","setCurrentPokemonId","useState","setPokemonData","isDetailLoading","setLoading","isModalOpen","setCloseModal","pokemonSpeciesData","setPokemonSpeciesData","setPokemonTypeData","useEffect","response","getPokemonDataById","getSpeciesDataById","typeData","getPokemonTypesById","Modal","dialogClassName","size","open","onClose","handleClose","onExited","Header","closeButton","Placeholder","Paragraph","marginTop","rows","graph","active","DetailsHeader","handleForwardClick","handleBackwardClick","closePopUp","PropertyCard","StatCard","EvolutionChainCard","Body","textAlign","Loader"],"sourceRoot":""}